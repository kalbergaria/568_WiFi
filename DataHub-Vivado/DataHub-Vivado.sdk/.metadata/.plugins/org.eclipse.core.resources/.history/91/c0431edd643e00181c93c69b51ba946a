#include "PmodWIFI.h"
#include "xil_cache.h"
#include "WiFi2.h"

#define PMODWIFI_VEC_ID XPAR_INTC_0_PMODWIFI_0_VEC_ID

/************************************************************************/
/*                                                                      */
/*              SET THESE VALUES FOR YOUR NETWORK                       */
/*                                                                      */
/************************************************************************/

IPv4 myIP = {192,168,100,12};
IPv4 readIP;

// Specify the SSID
const char *szSsid = "ECE568";

//#define USE_WPA2_PASSPHRASE
#if defined(USE_WPA2_PASSPHRASE)

   const char *szPassPhrase = "myPassword";
   #define WiFiConnectMacro() deIPcK.wfConnect(szSsid, szPassPhrase, &status)

#else // No security - OPEN

   #define WiFiConnectMacro() deIPcK.wfConnect(szSsid, &status)

#endif

//******************************************************************************************
//******************************************************************************************
//***************************** END OF CONFIGURATION ***************************************
//******************************************************************************************
//******************************************************************************************

typedef enum {
   NONE = 0,
   CONNECT,
   WAIT,
   RESOLVEENDPOINT,
   WRITE,
   READ,
   CLOSE,
   DONE,
} STATE;

STATE state = CONNECT;

unsigned tStart = 0;
unsigned tStart2 = 0;
unsigned tWait = 5000;

// Must have a datagram cache
UDPSocket udpClient;

// Read buffer
byte rgbRead[1024];

IPSTATUS status = ipsSuccess;
IPEndPoint epRemote;

// Message to write
byte connReqDatagram[] = {0,0}; // sourceID = LIGHTING, MsgTypes = CONN_REQ
int sizeOfConnReqDatagram = sizeof(connReqDatagram);

void DemoInitialize();
void DemoRun();


int main(void) {
   Xil_ICacheEnable();
   Xil_DCacheEnable();

   xil_printf("UDPEchoClient 3.0\r\nConnecting to network...\r\n");
   DemoInitialize();
   DemoRun();
   return 0;
}

void DemoInitialize() {
   setPmodWifiAddresses(
      XPAR_PMODWIFI_0_AXI_LITE_SPI_BASEADDR,
      XPAR_PMODWIFI_0_AXI_LITE_WFGPIO_BASEADDR,
      XPAR_PMODWIFI_0_AXI_LITE_WFCS_BASEADDR,
      XPAR_PMODWIFI_0_S_AXI_TIMER_BASEADDR
   );
   setPmodWifiIntVector(PMODWIFI_VEC_ID);
}

void DemoRun() {
   int cbRead = 0;
   while (1) {
      switch (state) {
      case CONNECT:
         if (Connect(status))
            state = RESOLVEENDPOINT;
         else if (IsIPStatusAnError(status))
         {
            xil_printf("Unable to connect, status: 0x%X\r\n", status);
            state = CLOSE;
         }
         break;

      case RESOLVEENDPOINT:
         if (deIPcK.resolveEndPoint(HUB_IP, PORT, epRemote,
               &status)) {
            if (deIPcK.udpSetEndPoint(epRemote, udpClient,
            		PORT, &status)) {

               state = WRITE;
            }
         }

         // Always check the status and get out on error
         if (IsIPStatusAnError(status)) {
            xil_printf("Unable to resolve endpoint, error: 0x%X\r\n", status);
            state = CLOSE;
         }
         break;

      case WAIT:
    	  if(SYSGetMilliSecond() - tStart2 > 30000)
    	  {
    		  xil_printf("Done waiting...");
			  state = RESOLVEENDPOINT;
    	  }
    	  break;

      // Write out the strings
      case WRITE:
         if (deIPcK.isIPReady(&status)) {
            xil_printf("Writing out Datagram\r\n");

            int writeReturn = udpClient.writeDatagram(connReqDatagram, sizeOfConnReqDatagram);

            xil_printf("Waiting to see if a datagram comes back:\r\n");
            state = READ;
            tStart = (unsigned) SYSGetMilliSecond();
         } else if (IsIPStatusAnError(status)) {
            xil_printf("Lost the network, error: 0x%X\r\n", status);
            state = CLOSE;
         }
         break;

      // Look for the echo back
      case READ:
         // See if we got anything to read
         if ((cbRead = udpClient.available()) > 0) {

            cbRead = cbRead < (int) sizeof(rgbRead) ? cbRead : sizeof(rgbRead);
            cbRead = udpClient.readDatagram(rgbRead, cbRead);
            rgbRead[cbRead] = 0;

            xil_printf("%s\r\n", rgbRead);

            // Give us some more time to wait for stuff to come back
            tStart = (unsigned) SYSGetMilliSecond();
         }

         // Give us some time to get everything echo'ed back
         // or if the datagram is never echoed back
         else if ((((unsigned) SYSGetMilliSecond()) - tStart) > tWait) {
            xil_printf("Done waiting, assuming nothing more is coming\r\n");
            state = CLOSE;
         }
         break;

      // Done, so close up the tcpClient
      case CLOSE:
         udpClient.close();
         xil_printf("Closing udpClient, Done with sketch.\r\n");
         state = DONE;
         break;

      case DONE:

      default:
         break;
      }

      // Keep the stack alive each pass through the loop()
      DEIPcK::periodicTasks();
   }
}
