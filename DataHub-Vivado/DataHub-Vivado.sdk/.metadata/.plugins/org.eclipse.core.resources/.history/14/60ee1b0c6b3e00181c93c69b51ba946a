#ifndef WIFI2_H
#define WIFI2_H

//#include "Messages.h"

// Forward declarations
class UDPSocket;
class UDPServer;
#define IPSTATUS uint32_t

//-----------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------
// Sensor Data
//-----------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------
#define SENSOR_DATA_SIZE 1019
typedef uint8_t SensorData[SENSOR_DATA_SIZE];
struct SensorDataPayload
{
    uint8_t sensorID;
    SensorData sensorData;
};

//-----------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------
// Sensor-node WiFi Interface Functions
//-----------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------

////////////////////////////////////////////////////////////////
// 	Summary:
// 		Handles all initialization needed for the WiFi Pmod
//
// 	Returns:
// 		VOID
void InitWiFi();

////////////////////////////////////////////////////////////////
// 	Summary:
// 		An attempt at establishing a
//		connection to the network specified in Config.h will be
// 		made, and attempt to establish a connection with the
//		Data Hub
//
// 	Returns:
// 		TRUE -> if a connection to the Data Hub was established
// 		FALSE -> if a connection to the Data Hub was not established
bool Connect(IPSTATUS* status);

////////////////////////////////////////////////////////////////
// 	Summary:
// 		Sends a connection request to the Data Hub. If the hub
// 		does not respond with a system health message within 1
//		second, then the connection attempt will be deemed a
//		failure
//
// 	Returns:
// 		TRUE -> if a connection to the Data Hub was established
// 		FALSE -> if a connection to the Data Hub was not
//		established
bool ConnectToHub(IPSTATUS* status);

////////////////////////////////////////////////////////////////
// 	Summary:
// 		Register each sensor belonging to the current node
// 		one-by-one allowing 250ms for the Data Hub to respond
// 		to confirm the registration of each sensor. Any
// 		registration is only deemed a success if the
//		registration is acknowledged by the Data Hub.
//
// 	Returns:
// 		TRUE -> if all sensors were successfully registered
// 		FALSE -> if any sensor could not be registered
bool RegisterSensors(IPSTATUS* status);

////////////////////////////////////////////////////////////////
// 	Summary:
// 		The data and the ID of its sensor provided to this
//      function will be sent to the Data Hub.
//
// 	Returns:
// 		TRUE -> if the sensor data and ID was successfully sent
// 		FALSE -> if there was an issue sending the data provided
bool SensorDataPub(IPSTATUS* status, SensorData sensorData, uint8_t sensorID);

bool HandleSystemHealth(Message* msg);
bool SubToSensor(Message* msg);
bool ReportEmergency(Message* msg);

////////////////////////////////////////////////////////////////
// 	Summary:
//
//
// 	Returns:
//
void CheckForMessagesForXMillis(IPSTATUS* status, uint32_t waitTime_ms);

//-----------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------
// Helper Functions
//-----------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------
bool SendMessage(Message* msg, IPSTATUS* status);
uint32_t RecvMessage(Message* msg);
int8_t CheckMsgBufForMsgType(MsgTypes desiredType);
uint32_t ElapsedMilliSeconds(uint32_t start, uint32_t current);
void PrintSensorNodeId(SensorNodeIds id);
void PrintMsgTypeAndDest(MsgTypes msgType, SensorNodeIds destId);
void PrintMsgType(MsgTypes msgType);

#endif // WIFI_H
